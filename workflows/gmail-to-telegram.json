{
  "name": "gmail-to-telegram",
  "nodes": [
    {
      "parameters": {
        "operation": "getAll",
        "limit": 3,
        "simple": false,
        "filters": {
          "readStatus": "unread",
          "receivedAfter": "={{ $today.minus(2, 'day').startOf('day').toISO() }}"
        },
        "options": {}
      },
      "id": "get-gmail-messages",
      "name": "Get Unread Emails",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2,
      "position": [464, 304],
      "webhookId": "de438789-71b6-421a-b4ec-c8ff234aa80f",
      "alwaysOutputData": true,
      "credentials": {
        "gmailOAuth2": {
          "id": "52sKMHofP7P9AGpR",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "condition-has-emails",
              "leftValue": "={{ $input.all().length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            },
            {
              "id": "090360f7-5b35-4376-b041-18fb1eb89a46",
              "leftValue": "={{ $input.first() }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-emails-exist",
      "name": "Any Emails?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [656, 304],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "jsCode": "// Single Code node: per-email Telegram messages + final daily summary\n// Uses ONLY the JSON inside `response` for each input item.\n\n// ---------- helpers ----------\nfunction toObj(r) {\n  if (r == null) return {};\n  if (typeof r === 'string') { try { return JSON.parse(r); } catch { return {}; } }\n  if (typeof r === 'object') return r;\n  return {};\n}\n\nfunction cleanFromName(s) {\n  if (!s) return 'Unknown sender';\n  let out = String(s);\n  if (out.includes('<')) out = out.split('<')[0].trim();\n  if (out.includes('|')) out = out.split('|')[0].trim();\n  return out.replace(/(^\"|\"$)/g, '') || 'Unknown sender';\n}\n\nfunction formatActions(actions) {\n  if (!Array.isArray(actions) || actions.length === 0) return '';\n  const rows = actions.map((a) => {\n    if (typeof a === 'string') {\n      // Try \"Label: URL\"\n      const parts = a.split(':');\n      if (parts.length >= 2) {\n        const label = parts.shift().trim();\n        const rest = parts.join(':').trim();\n        const m = rest.match(/https?:\\/\\/\\S+/);\n        if (m) return `- [${label}](${m[0]})`;\n      }\n      const m = a.match(/https?:\\/\\/\\S+/);\n      if (m) return `- [Open link](${m[0]})`;\n      return `- ${a}`;\n    } else if (a && typeof a === 'object') {\n      const label = a.label || a.title || 'Open link';\n      const url = a.url || a.href;\n      if (url) return `- [${label}](${url})`;\n      return `- ${label}`;\n    }\n    return null;\n  }).filter(Boolean);\n  return rows.length ? `\\n${rows.join('\\n')}` : '';\n}\n\n// ---------- main ----------\nconst items = $input.all();\nconst perEmailOutputs = [];\nconst agg = {\n  total: 0,\n  important: 0,\n  byCategory: {},               // { category: count }\n  importantList: [],            // collect important subjects for \"top important\"\n};\n\nfor (const it of items) {\n  const env = toObj(it.json?.response); // <-- only source of truth\n\n  const isImportant = !!env.isImportant;\n  const from = cleanFromName(env.from || 'Unknown sender');\n  const subject = env.subject || 'No subject';\n  const category = env.category || 'Uncategorized';\n  const receivedDate = env.receivedDate || new Date().toISOString();\n  const gmailUrl = env.gmailUrl || '#';\n  const summary = env.summary || 'No summary';\n  const actions = Array.isArray(env.actions) ? env.actions : [];\n\n  // Aggregate\n  agg.total += 1;\n  if (isImportant) agg.important += 1;\n  agg.byCategory[category] = (agg.byCategory[category] || 0) + 1;\n  if (isImportant) {\n    agg.importantList.push({ subject, from });\n  }\n\n  // Per-email message - COMPACT FORMAT\n  const priorityEmoji = isImportant ? 'ðŸ”´' : 'ðŸ“§';\n  const actionsBlock = formatActions(actions);\n\n  const message =\n    `${priorityEmoji} **${from}**: ${subject}\\n` +\n    `Category: ${category}\\n` +\n    `Received: ${new Date(receivedDate).toLocaleString()}\\n` +\n    `${summary}${actionsBlock}\\n` +\n    `[Open in Gmail](${gmailUrl})`;\n\n  perEmailOutputs.push({\n    json: {\n      message,\n      isImportant,\n      subject,\n      from,\n      category,\n      receivedDate,\n      gmailUrl,\n      summary,\n      actions,\n      isSummary: false,\n    },\n  });\n}\n\n// If no emails, return just a \"no new emails\" summary\nif (agg.total === 0) {\n  return [{\n    json: {\n      message: 'ðŸ“§ Daily Gmail scan complete â€” no new emails found.',\n      totalEmails: 0,\n      importantEmails: 0,\n      byCategory: {},\n      finishedAt: new Date().toLocaleString(),\n      isSummary: true,\n    },\n  }];\n}\n\n// Build final daily summary message - COMPACT FORMAT\nconst catLines = Object.entries(agg.byCategory)\n  .sort((a, b) => b[1] - a[1])\n  .map(([cat, n]) => `â€¢ ${cat}: ${n}`)\n  .join('\\n');\n\nconst topImportantLines = agg.importantList\n  .slice(0, 5)\n  .map(e => `- **${e.subject || 'No subject'}** â€” ${e.from || 'Unknown sender'}`)\n  .join('\\n');\n\nconst finishedAt = new Date().toLocaleString();\n\nlet summaryMessage =\n  `ðŸ“Š **Daily Summary**\\n\\n` +\n  `ðŸ“§ Total emails processed: ${agg.total}\\n` +\n  `ðŸ”´ Important emails: ${agg.important}\\n`;\n\nif (catLines) {\n  summaryMessage += `\\n**By category:**\\n${catLines}\\n`;\n}\nif (topImportantLines) {\n  summaryMessage += `\\n**Top important:**\\n${topImportantLines}\\n`;\n}\n\nsummaryMessage += `\\n_Scan completed at ${finishedAt}_`;\n\n// Append summary as the last item\nperEmailOutputs.push({\n  json: {\n    message: summaryMessage,\n    totalEmails: agg.total,\n    importantEmails: agg.important,\n    byCategory: agg.byCategory,\n    finishedAt,\n    isSummary: true,\n  },\n});\n\nreturn perEmailOutputs;"
      },
      "id": "format-telegram-message",
      "name": "Format for Telegram",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1552, 304]
    },
    {
      "parameters": {
        "chatId": "={{ 219678893 }}",
        "text": "={{ $json.message }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "send-telegram-message",
      "name": "Send to Telegram",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [1728, 304],
      "webhookId": "bb5d0404-e164-49b9-8f65-2df8d5aa2e10",
      "credentials": {
        "telegramApi": {
          "id": "h7RbmzMEg5YYOgNt",
          "name": "Emails Summary Bot"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 4
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [272, 304],
      "id": "c54f948e-47f4-486a-a897-94c4a11b09fd",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e0f5d3a2-366b-44db-9dd3-033d6b9f7a80",
              "name": "id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "e22e7ea8-4364-426d-a457-afce4bfa6625",
              "name": "to",
              "value": "={{ $json.to.text }}",
              "type": "string"
            },
            {
              "id": "0c71a3c0-6aff-4336-b82f-4c21fc514cd9",
              "name": "fromAddress",
              "value": "={{ $json.from.value[0].address }}",
              "type": "string"
            },
            {
              "id": "42822dc7-4c9b-433c-8965-d326036dad98",
              "name": "fromName",
              "value": "={{ $json.from.value[0].name }}",
              "type": "string"
            },
            {
              "id": "b6a55194-7dcb-4f0a-a048-b09eef1ce6e6",
              "name": "subject",
              "value": "={{ $json.subject }}",
              "type": "string"
            },
            {
              "id": "ea1c5a43-f3fa-4af5-ba9d-ecd3946ba6a8",
              "name": "text",
              "value": "={{ $json.text }}",
              "type": "string"
            },
            {
              "id": "94a8bb73-3ac0-4721-ba0a-f0d585810bd3",
              "name": "gmailUrl",
              "value": "=https://mail.google.com/mail/u/0/#inbox/{{ $json.threadId }}",
              "type": "string"
            },
            {
              "id": "d6341c88-1aca-4007-995d-cc34e7019247",
              "name": "internalDate",
              "value": "={{ $json.date }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [928, 304],
      "id": "161185c0-b1df-4bf0-80c9-b6d141765760",
      "name": "Map Email Fields"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [1216, 304],
      "id": "ebafcb48-c359-4567-8ef9-df65207b4e7b",
      "name": "Loop Over Emails"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://ollama:11434/api/generate",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "llama3.2:3b"
            },
            {
              "name": "prompt",
              "value": "=Summarize the following email according to the system instructions above.\n\nTo: {{ $json.to }}\nFrom: {{ $json.fromAddress }} | {{ $json.fromName }}\nSubject: {{ $json.subject }}\nGmail URL: {{ $json.gmailUrl }}\nReceived: {{ $json.internalDate }}\n\nText:\n{{ $json.text }}"
            },
            {
              "name": "stream",
              "value": false
            },
            {
              "name": "system",
              "value": "You are a JSON-only function that summarizes a single email.\n\nOutput **one minified JSON object** that strictly matches this schema:\n\n{\n  \"subject\": \"string|null\",\n  \"from\": \"string|null\",\n  \"isImportant\": true,\n  \"summary\": \"string|null\",\n  \"category\": \"string|null\",\n  \"actions\": [\n    {\"label\": \"string\", \"url\": \"string\"}  // url must start with http\n  ],\n  \"gmailUrl\": \"string|null\",\n  \"receivedDate\": \"string|null\"           // ISO8601, e.g. 2025-10-20T19:30:48Z\n}\n\n### Rules\n- Output **only** a single valid JSON object (no markdown, no code fences, no explanations).\n- Use `null` when data is unknown.\n- `isImportant` must be a boolean (true/false).\n- Keep summaries concise (â‰¤ 3 sentences).\n- Categorize briefly (e.g. \"Newsletter\", \"Account Notification\", \"Promotional\", \"Work\").\n- Collect up to 3 useful links into `\"actions\"` with both `\"label\"` and `\"url\"`.\n- Ignore tracking/marketing garbage.\n- Never fabricate or hallucinate content.\n- Return the JSON **in one line**."
            }
          ]
        },
        "options": {
          "timeout": 3600000
        }
      },
      "id": "analyze-email-llm",
      "name": "Summarise Email with LLM",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1296, 32]
    },
    {
      "parameters": {
        "chatId": "={{ 219678893 }}",
        "text": "ðŸ“§ Daily Gmail scan complete - no new emails found.",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [928, 480],
      "id": "b01cc065-ac24-4dfa-8e6a-9dffc1df56dd",
      "name": "Send a text message1",
      "webhookId": "ea8088a1-7a12-4dc2-b691-9e3d3d37cab1",
      "credentials": {
        "telegramApi": {
          "id": "h7RbmzMEg5YYOgNt",
          "name": "Emails Summary Bot"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Summarize the following email according to the system instructions.\n\nTo: {{ $json.to }}\nFrom: {{ $json.fromAddress }} | {{ $json.fromName }}\nSubject: {{ $json.subject }}\nGmail URL: {{ $json.gmailUrl }}\nReceived: {{ $json.internalDate }}\n\nText:\n{{ $json.text }}",
        "options": {
          "systemMessage": "=You are an email analysis agent. Your goal is to analyze an email and produce a structured JSON object describing its key attributes.\n\nFollow these rules strictly:\n1. Summarize the email concisely in plain language (no speculation).\n2. Extract up to 5 actionable items â€” each must be either:\n  - a short descriptive label with a valid URL starting with http or https, or\n  - plain text if no URL is present.\n3. Determine whether the email is important (true / false).\n4. Assign one category from this fixed list or create a new one:\n\nwork, meeting, personal, finance, travel, delivery,\nnotification, promotion, event, education, support, unknown\n\n\n5. If any field cannot be determined, return \"unknown\" or null.\n6. Do not invent or hallucinate any data.\n7. Output only valid JSON, following exactly the schema below â€” no extra text or commentary.\n\nExpected JSON format:\n{\n  \"subject\": \"string|null\",\n  \"from\": \"string|null\",\n  \"isImportant\": true,\n  \"summary\": \"string|null\",\n  \"category\": \"string|null\",\n  \"actions\": [\n    {\"label\": \"string\", \"url\": \"string\"}   // or a simple string action\n  ],\n  \"gmailUrl\": \"string|null\",\n  \"receivedDate\": \"string|null\"            // ISO8601, e.g. 2025-10-20T19:30:48Z\n}\n\nExample output:\n{\n  \"subject\": \"Invoice for October\",\n  \"from\": \"Acme Billing <billing@acme.com>\",\n  \"isImportant\": true,\n  \"summary\": \"Your October invoice is ready for payment.\",\n  \"category\": \"finance\",\n  \"actions\": [\n    {\"label\": \"View Invoice\", \"url\": \"https://acme.com/invoices/123\"},\n    {\"label\": \"Pay Now\", \"url\": \"https://acme.com/pay/123\"}\n  ],\n  \"gmailUrl\": \"https://mail.google.com/mail/u/0/#inbox/ABC123\",\n  \"receivedDate\": \"2025-10-24T09:41:12Z\"\n}",
          "enableStreaming": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [1408, 464],
      "id": "eb6c5551-5f1e-4a51-bdde-9c693ae78de8",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": "llama3.2:3b",
        "options": {
          "temperature": 0.2,
          "topP": 0.9,
          "numThread": 4,
          "repeatPenalty": 1.1,
          "format": "json"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [1280, 768],
      "id": "02311d68-2cbe-4026-bad8-525426237099",
      "name": "Ollama Chat Model",
      "credentials": {
        "ollamaApi": {
          "id": "eQ3cvhxCtXxqOlT5",
          "name": "Local Ollama"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Get Unread Emails": {
      "main": [
        [
          {
            "node": "Any Emails?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Any Emails?": {
      "main": [
        [
          {
            "node": "Map Email Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send a text message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format for Telegram": {
      "main": [
        [
          {
            "node": "Send to Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send to Telegram": {
      "main": [[]]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get Unread Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map Email Fields": {
      "main": [
        [
          {
            "node": "Loop Over Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Emails": {
      "main": [
        [
          {
            "node": "Format for Telegram",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarise Email with LLM": {
      "main": [[]]
    },
    "Ollama Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Loop Over Emails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveExecutionProgress": true,
    "callerPolicy": "workflowsFromSameOwner",
    "availableInMCP": false,
    "errorWorkflow": "5YHHqqqLCxRFvISB"
  },
  "versionId": "d60b1423-f6e2-4028-adbd-fb65737eeb5b",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f6850b7a742915e4beea1da1d7e81ab301286f32549db44a9ced290422cc1c31"
  },
  "id": "5YHHqqqLCxRFvISB",
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "gmail-automation",
      "name": "Gmail Automation"
    }
  ]
}

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: homelab-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-n8n}
      POSTGRES_USER: ${POSTGRES_USER:-n8n}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: ${TIMEZONE:-Europe/Warsaw}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - homelab
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-n8n} -d ${POSTGRES_DB:-n8n}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # n8n Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: homelab-n8n
    restart: unless-stopped
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - N8N_SSL_KEY=/certs/key.pem
      - N8N_SSL_CERT=/certs/cert.pem
      - WEBHOOK_URL=https://${N8N_HOST:-localhost}/
      - GENERIC_TIMEZONE=${TIMEZONE:-Europe/Warsaw}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-n8n}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-n8n}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_LOG_LEVEL=${N8N_LOG_LEVEL:-info}
      - N8N_METRICS=true
      - EXECUTIONS_DATA_SAVE_ON_ERROR=all
      - EXECUTIONS_DATA_SAVE_ON_SUCCESS=all
      - EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=true
    ports:
      - "443:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./workflows:/home/node/.n8n/workflows
      - ./config/ssl:/certs:ro
    networks:
      - homelab
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "--no-check-certificate", "https://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ollama Local LLM
  ollama:
    image: ollama/ollama:latest
    container_name: homelab-ollama
    restart: unless-stopped
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
      - OLLAMA_MAX_LOADED_MODELS=3
      - OLLAMA_NUM_PARALLEL=2
    ports:
      - "${OLLAMA_PORT:-11434}:11434"
    volumes:
      - ollama_data:/root/.ollama
      - ./config/ollama:/etc/ollama:ro
    networks:
      - homelab
    deploy:
      resources:
        limits:
          memory: 12G  # Allow up to 12GB for Ollama on 16GB Pi
        reservations:
          memory: 4G   # Reserve 4GB minimum
    # Uncomment for NVIDIA GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
    healthcheck:
      test: ["CMD-SHELL", "ollama list || exit 1"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 30s

  # Tailscale (Optional) - Secure remote access
  tailscale:
    image: tailscale/tailscale:latest
    container_name: homelab-tailscale
    restart: unless-stopped
    environment:
      - TS_AUTHKEY=${TAILSCALE_AUTH_KEY}
      - TS_HOSTNAME=${TAILSCALE_HOSTNAME:-homelab}
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_SERVE_CONFIG=/config/tailscale.json
    volumes:
      - tailscale_data:/var/lib/tailscale
      - ./config/tailscale:/config:ro
      - /dev/net/tun:/dev/net/tun
    network_mode: host
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    profiles:
      - tailscale
    healthcheck:
      test: ["CMD", "tailscale", "status"]
      interval: 60s
      timeout: 10s
      retries: 3

  # Redis (Optional) - For caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: homelab-redis
    restart: unless-stopped
    environment:
      - TZ=${TIMEZONE:-Europe/Warsaw}
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - homelab
    profiles:
      - redis
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Watchtower - Automatic container updates
  watchtower:
    image: containrrr/watchtower:latest
    container_name: homelab-watchtower
    restart: unless-stopped
    environment:
      - TZ=${TIMEZONE:-Europe/Warsaw}
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_SCHEDULE=${WATCHTOWER_SCHEDULE:-0 0 4 * * *}
      - WATCHTOWER_NOTIFICATIONS_LEVEL=info
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_REVIVE_STOPPED=false
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - homelab
    profiles:
      - watchtower

volumes:
  postgres_data:
    name: homelab_postgres_data
    external: true
  n8n_data:
    name: homelab_n8n_data
    external: true
  ollama_data:
    name: homelab_ollama_data
    external: true
  tailscale_data:
    name: homelab_tailscale_data
    external: true
  redis_data:
    name: homelab_redis_data
    external: true

networks:
  homelab:
    name: homelab_network
    driver: bridge